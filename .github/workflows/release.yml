name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v7

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-groups

    - name: Run tests
      run: uv run pytest

  create-release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v5

    - name: Parse Python version
      id: version
      run: |
        # PEP 440 regex for Python package versioning (with v prefix)
        if [[ "${{ github.ref_name }}" =~ ^v([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*((a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?$ ]]; then
          # Check if it contains pre-release identifiers (alpha, beta, rc, dev)
          if [[ "${{ github.ref_name }}" =~ (a|b|rc|dev) ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Invalid Python version tag: ${{ github.ref_name }}"
          exit 1
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        prerelease: ${{ steps.version.outputs.prerelease == 'true' }}
        generate_release_notes: true

  publish-to-pypi:
    needs: [test, create-release]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v7

    - name: Set up Python
      run: uv python install

    - name: Install
      run: uv sync --all-groups

    - name: Build
      run: uv build

    - name: Publish to PyPI
      run: uv publish
